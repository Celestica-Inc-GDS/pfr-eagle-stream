// (C) 2019 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other
// software and tools, and its AMPP partner logic functions, and any output
// files from any of the foregoing (including device programming or simulation
// files), and any associated documentation or information are expressly subject
// to the terms and conditions of the Intel Program License Subscription
// Agreement, Intel FPGA IP License Agreement, or other applicable
// license agreement, including, without limitation, that your use is for the
// sole purpose of programming logic devices manufactured by Intel and sold by
// Intel or its authorized distributors.  Please refer to the applicable
// agreement for further details.

/**
 * @file cert_gen_options.h
 * @brief Define options values used for X509 certificate generation
 */

#ifndef EAGLESTREAM_INC_CERT_GEN_OPTIONS_H_
#define EAGLESTREAM_INC_CERT_GEN_OPTIONS_H_

#include "pfr_sys.h"
#include "cert.h"

#if defined(ENABLE_ATTESTATION_WITH_ECDSA_384) || defined(ENABLE_ATTESTATION_WITH_ECDSA_256)

// Certificate option values
// - Certificate Version
#define CERT_VERSION   CERT_VERSION_VALUE_3 // Version 3

// - Certificate Serial Number
#define CERT_SERIAL_NUMBER   { 0x1a, 0x2b, 0x3c, 0x4d, 0x5e }
#define CERT_SERIAL_NUMBER_LENGTH   5 // max 20 bytes for x509 serial number

// - Certificate Signature Algorithm Identifier values
//   - Currently ecdsaWithSHA384 is used. Refer to : #define ASN1_OID_ECDSAWITHSHA384
//   - for ecdsaWithSHA384, there are no additional parameters
#define SIGNATURE_ALGORITHM_IDENTIFIER_PARAMETER_LENGTH   0

// - Certificate Issuer Name values
#define ISSUER_NAME_COUNTRY_NAME_VALUE   {'U','S'}
#define ISSUER_NAME_COUNTRY_NAME_LENGTH   2 //change length value to correspond to value above
#define ISSUER_NAME_STATE_OR_PROVINCE_NAME_VALUE   {'O','R'}
#define ISSUER_NAME_STATE_OR_PROVINCE_NAME_LENGTH   2 //change length value to correspond to value above
#define ISSUER_NAME_LOCALITY_NAME_VALUE   {'H','i','l','l','s','b','o','r','o'}
#define ISSUER_NAME_LOCALITY_NAME_LENGTH   9 //change length value to correspond to value above
#define ISSUER_NAME_ORGANIZATION_NAME_VALUE   {'I','n','t','e','l'}
#define ISSUER_NAME_ORGANIZATION_NAME_LENGTH   5 //change length value to correspond to value above
#define ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_VALUE   {'N','S','G'}
#define ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_LENGTH   3 //change length value to correspond to value above
#define ISSUER_NAME_COMMON_NAME_VALUE_ROOT   {'i','n','t','e','l','r','o','o','t'}
#define ISSUER_NAME_COMMON_NAME_VALUE_LEAF   {'i','n','t','e','l','l','e','a','f'}
#define ISSUER_NAME_COMMON_NAME_LENGTH   9 //change length value to correspond to value above
#define ISSUER_NAME_EMAIL_ADDRESS_VALUE   {'-'}
#define ISSUER_NAME_EMAIL_ADDRESS_LENGTH   1 //change length value to correspond to value above

// - Certificate Validity Period values
#define CERT_VALIDITY_FROM   {'2','1','0','1','0','1','0','0','0','0','0','0','Z'} //YYMMDDhhmmssZ
#define CERT_VALIDITY_TILL   {'3','0','1','2','3','1','2','3','5','9','5','9','Z'}

// - Certificate Basic Constraint Extension values
#define BASIC_CONSTRAINTS_NOT_CA_OCTET_STRING   {ASN1_TYPE_TAG_SEQUENCE, 0x00}
#define BASIC_CONSTRAINTS_NOT_CA_OCTET_STRING_LENGTH   2
#define BASIC_CONSTRAINTS_IS_CA_OCTET_STRING   {ASN1_TYPE_TAG_SEQUENCE, ASN1_DER_BOOLEAN_STRUCT_SIZE, ASN1_TYPE_TAG_BOOLEAN, ASN1_DER_BOOLEAN_LENGTH, ASN1_DER_BOOLEAN_TRUE}
#define BASIC_CONSTRAINTS_IS_CA_OCTET_STRING_LENGTH  5
#define BASIC_CONSTRAINTS_IS_CA_PATH_LENGTH_CONSTRAINT_OCTET_STRING   {ASN1_TYPE_TAG_SEQUENCE, ASN1_DER_BOOLEAN_STRUCT_SIZE + 3, ASN1_TYPE_TAG_BOOLEAN, ASN1_DER_BOOLEAN_LENGTH, ASN1_DER_BOOLEAN_TRUE, ASN1_TYPE_TAG_INTEGER, 0x01, 0x7f}
#define BASIC_CONSTRAINTS_IS_CA_PATH_LENGTH_CONSTRAINT_OCTET_STRING_LENGTH  8


// - Certificate Extensions values
//   - Root Certificate (Layer 0) Basic Constraints
#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_ENABLED   1
#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_CRITICAL   1
//   - define if cert is certificate authority
#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_CA   X509_BASIC_CONSTRAINTS_IS_CA
#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_IS_ENABLED   0
#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_VALUE   0

//   - Root Certificate (Layer 0) Key Usage
#define EXTENSIONS_ROOT_CERT_KEY_USAGE_IS_ENABLED   1
#define EXTENSIONS_ROOT_CERT_KEY_USAGE_IS_CRITICAL   1
//   - list key usage(s) to define
#define EXTENSIONS_ROOT_CERT_KEY_USAGE_FLAGS   X509_KEY_USAGE_FLAG_KEY_CERT_SIGN

//   - Root Certificate (Layer 0) Extended Key Usage
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_IS_ENABLED   1
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_IS_CRITICAL   0
//   - list key usage(s) to define
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS   CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH + CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH



//   - Leaf Certificate (Layer 1) Basic Constraints
#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_ENABLED   1
#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_CRITICAL   1
//   - define if cert is certificate authority
#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_CA   X509_BASIC_CONSTRAINTS_NOT_CA
#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_IS_ENABLED   0
#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_VALUE   0

//   - Leaf Certificate (Layer 1) Key Usage
#define EXTENSIONS_LEAF_CERT_KEY_USAGE_IS_ENABLED   1
#define EXTENSIONS_LEAF_CERT_KEY_USAGE_IS_CRITICAL   1
//   - list key usage(s) to define
#define EXTENSIONS_LEAF_CERT_KEY_USAGE_FLAGS   X509_KEY_USAGE_FLAG_DIGITAL_SIGNATURE

//   - Leaf Certificate (Layer 0) Extended Key Usage
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_IS_ENABLED   1
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_IS_CRITICAL   0
//   - list key usage(s) to define
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS   CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH + CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH




// DER Set and Sequence length calculations

#define VERSION_OCTET_IDENTIFIER_LENGTH   2 + CERT_VERSION_LENGTH

#define SIGNATURE_ALGORITHM_IDENTIFIER_SEQUENCE_LENGTH   4 + ASN1_OID_ECDSAWITHSHA384_LENGTH + SIGNATURE_ALGORITHM_IDENTIFIER_PARAMETER_LENGTH

#define VALIDITY_PERIOD_SEQUENCE_LENGTH   4 + CERT_VALIDITY_UTCTIME_LENGTH + CERT_VALIDITY_UTCTIME_LENGTH

#define ISSUER_NAME_COUNTRY_NAME_SEQUENCE_LENGTH  4 + ASN1_OID_COUNTRY_NAME_LENGTH + ISSUER_NAME_COUNTRY_NAME_LENGTH
#define ISSUER_NAME_COUNTRY_NAME_SET_LENGTH   2 + ISSUER_NAME_COUNTRY_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_STATE_OR_PROVINCE_NAME_SEQUENCE_LENGTH   4 + ASN1_OID_STATE_OR_PROVINCE_NAME_LENGTH + ISSUER_NAME_STATE_OR_PROVINCE_NAME_LENGTH
#define ISSUER_NAME_STATE_OR_PROVINCE_NAME_SET_LENGTH   2 + ISSUER_NAME_STATE_OR_PROVINCE_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_LOCALITY_NAME_SEQUENCE_LENGTH   4 + ASN1_OID_LOCALITY_NAME_LENGTH + ISSUER_NAME_LOCALITY_NAME_LENGTH
#define ISSUER_NAME_LOCALITY_NAME_SET_LENGTH   2 + ISSUER_NAME_LOCALITY_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_ORGANIZATION_NAME_SEQUENCE_LENGTH   4 + ASN1_OID_ORGANIZATION_NAME_LENGTH + ISSUER_NAME_ORGANIZATION_NAME_LENGTH
#define ISSUER_NAME_ORGANIZATION_NAME_SET_LENGTH   2 + ISSUER_NAME_ORGANIZATION_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_SEQUENCE_LENGTH   4 + ASN1_OID_ORGANIZATIONAL_UNIT_NAME_LENGTH + ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_LENGTH
#define ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_SET_LENGTH   2 + ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_COMMON_NAME_SEQUENCE_LENGTH   4 + ASN1_OID_COMMON_NAME_LENGTH + ISSUER_NAME_COMMON_NAME_LENGTH
#define ISSUER_NAME_COMMON_NAME_SET_LENGTH   2 + ISSUER_NAME_COMMON_NAME_SEQUENCE_LENGTH
#define ISSUER_NAME_EMAIL_ADDRESS_SEQUENCE_LENGTH   4 + ASN1_OID_EMAIL_ADDRESS_LENGTH + ISSUER_NAME_EMAIL_ADDRESS_LENGTH
#define ISSUER_NAME_EMAIL_ADDRESS_SET_LENGTH   2 + ISSUER_NAME_EMAIL_ADDRESS_SEQUENCE_LENGTH
#define ISSUER_NAME_SEQUENCE_LENGTH   14 + ISSUER_NAME_COUNTRY_NAME_SET_LENGTH + ISSUER_NAME_STATE_OR_PROVINCE_NAME_SET_LENGTH + ISSUER_NAME_LOCALITY_NAME_SET_LENGTH + ISSUER_NAME_ORGANIZATION_NAME_SET_LENGTH + ISSUER_NAME_ORGANIZATIONAL_UNIT_NAME_SET_LENGTH + ISSUER_NAME_COMMON_NAME_SET_LENGTH + ISSUER_NAME_EMAIL_ADDRESS_SET_LENGTH

#define PUBLIC_KEY_INFO_ALGORITHM_SEQUENCE_LENGTH   4 + ASN1_OID_ECPUBLICKEY_LENGTH + ASN1_OID_SECP384R1_LENGTH
#define PUBLIC_KEY_INFO_SEQUENCE_LENGTH   4 + PUBLIC_KEY_INFO_ALGORITHM_SEQUENCE_LENGTH + PUBLIC_KEY_INFO_KEY_LENGTH

#define EXTENSIONS_SEQUENCE_LENGTH   0
#define EXTENSIONS_LENGTH   2 + EXTENSIONS_SEQUENCE_LENGTH

#define EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_SEQUENCE_LENGTH   9 + ((EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_CRITICAL) ? 3 : 0) + ((EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_CA) ? ((EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_IS_ENABLED) ? 6 : 3) : 0)

#define EXTENSIONS_ROOT_CERT_KEY_USAGE_BIT_STRING_LENGTH   (((EXTENSIONS_ROOT_CERT_KEY_USAGE_FLAGS) & X509_KEY_USAGE_FLAG_DECIPHER_ONLY) ? 3 : 2)
#define EXTENSIONS_ROOT_CERT_KEY_USAGE_OCTET_STRING_LENGTH   2 + EXTENSIONS_ROOT_CERT_KEY_USAGE_BIT_STRING_LENGTH
#define EXTENSIONS_ROOT_CERT_KEY_USAGE_SEQUENCE_LENGTH   7 + ((EXTENSIONS_ROOT_CERT_KEY_USAGE_IS_CRITICAL) ? 3 : 0) + EXTENSIONS_ROOT_CERT_KEY_USAGE_OCTET_STRING_LENGTH

#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_COUNT   (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CODE_SIGNING) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_EMAIL_PROTECTION) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_TIME_STAMPING) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_OCSP_SIGNING) ? 1 : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_ANY_EXTENDED_KEY_USAGE) ? 1 : 0)
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_SEQUENCE_LENGTH   (2 * (EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_COUNT)) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CODE_SIGNING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_EMAIL_PROTECTION) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_TIME_STAMPING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_OCSP_SIGNING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_ANY_EXTENDED_KEY_USAGE) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_ANY_EXTENDED_KEY_USAGE_LENGTH : 0)
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_OCTET_STRING_LENGTH   2 + (EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_SEQUENCE_LENGTH)
#define EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_SEQUENCE_LENGTH   7 + ((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_IS_CRITICAL) ? 3 : 0) + EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_OCTET_STRING_LENGTH

#define EXTENSIONS_ROOT_SEQUENCE_LENGTH   ((EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_IS_ENABLED) ? (2 + EXTENSIONS_ROOT_CERT_BASIC_CONSTRAINTS_SEQUENCE_LENGTH) : 0) + ((EXTENSIONS_ROOT_CERT_KEY_USAGE_IS_ENABLED) ? (2 + EXTENSIONS_ROOT_CERT_KEY_USAGE_SEQUENCE_LENGTH) : 0) + ((EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_IS_ENABLED) ? (2 + EXTENSIONS_ROOT_CERT_EXTENDED_KEY_USAGE_SEQUENCE_LENGTH) : 0)
#define EXTENSIONS_ROOT_LENGTH   2 + EXTENSIONS_ROOT_SEQUENCE_LENGTH

#define EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_SEQUENCE_LENGTH   9 + ((EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_CRITICAL) ? 3 : 0) + ((EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_CA) ? ((EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_PATH_LENGTH_CONSTRAINTS_IS_ENABLED) ? 6 : 3) : 0)

#define EXTENSIONS_LEAF_CERT_KEY_USAGE_BIT_STRING_LENGTH   (((EXTENSIONS_LEAF_CERT_KEY_USAGE_FLAGS) & X509_KEY_USAGE_FLAG_DECIPHER_ONLY) ? 3 : 2)
#define EXTENSIONS_LEAF_CERT_KEY_USAGE_OCTET_STRING_LENGTH   2 + EXTENSIONS_LEAF_CERT_KEY_USAGE_BIT_STRING_LENGTH
#define EXTENSIONS_LEAF_CERT_KEY_USAGE_SEQUENCE_LENGTH   7 + ((EXTENSIONS_LEAF_CERT_KEY_USAGE_IS_CRITICAL) ? 3 : 0) + EXTENSIONS_LEAF_CERT_KEY_USAGE_OCTET_STRING_LENGTH

#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_COUNT   (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CODE_SIGNING) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_EMAIL_PROTECTION) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_TIME_STAMPING) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_OCSP_SIGNING) ? 1 : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_ANY_EXTENDED_KEY_USAGE) ? 1 : 0)
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_SEQUENCE_LENGTH   (2 * (EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_COUNT)) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_SERVER_AUTH) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CLIENT_AUTH) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_CODE_SIGNING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_EMAIL_PROTECTION) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_TIME_STAMPING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_OCSP_SIGNING) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_UNIVERSAL_LENGTH : 0) + (((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS) & CERT_EXTENSIONS_EXTENDED_KEY_USAGE_DEFINE_ANY_EXTENDED_KEY_USAGE) ? ASN1_OID_EXT_EXTENDED_KEY_USAGE_ANY_EXTENDED_KEY_USAGE_LENGTH : 0)
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_OCTET_STRING_LENGTH   2 + (EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_DEFINITIONS_SEQUENCE_LENGTH)
#define EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_SEQUENCE_LENGTH   7 + ((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_IS_CRITICAL) ? 3 : 0) + EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_OCTET_STRING_LENGTH

#define EXTENSIONS_LEAF_SEQUENCE_LENGTH   ((EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_IS_ENABLED) ? (2 + EXTENSIONS_LEAF_CERT_BASIC_CONSTRAINTS_SEQUENCE_LENGTH) : 0) + ((EXTENSIONS_LEAF_CERT_KEY_USAGE_IS_ENABLED) ? (2 + EXTENSIONS_LEAF_CERT_KEY_USAGE_SEQUENCE_LENGTH) : 0) + ((EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_IS_ENABLED) ? (2 + EXTENSIONS_LEAF_CERT_EXTENDED_KEY_USAGE_SEQUENCE_LENGTH) : 0)
#define EXTENSIONS_LEAF_LENGTH   2 + EXTENSIONS_LEAF_SEQUENCE_LENGTH



/* Signed content refers to the sequence containing the fields:
 * - version
 * - serial number
 * - signature algorithm identifier
 * - issuer name
 * - validity period
 * - subject name
 * - subject's public key info
 * - extensions (includes other unused fields)
 *
 * CERT_SIGNED_CONTENT_SEQUENCE_LENGTH = 2 + VERSION_OCTET_IDENTIFIER_LENGTH +
 *                                       2 + CERT_SERIAL_NUMBER_LENGTH +
 *                                       2 + SIGNATURE_ALGORITHM_IDENTIFIER_SEQUENCE_LENGTH +
 *                                       ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH +
 *                                       2 + VALIDITY_PERIOD_SEQUENCE_LENGTH +
 *                                       ((SUBJECT_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + SUBJECT_NAME_SEQUENCE_LENGTH +
 *                                       ((PUBLIC_KEY_INFO_SEQUENCE_LENGTH <= 127) ? 2 : 3) + PUBLIC_KEY_INFO_SEQUENCE_LENGTH +
 *                                       2 + EXTENSIONS_LENGTH
 */
#define CERT_SIGNED_CONTENT_SEQUENCE_LENGTH   10 + VERSION_OCTET_IDENTIFIER_LENGTH + CERT_SERIAL_NUMBER_LENGTH + SIGNATURE_ALGORITHM_IDENTIFIER_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + VALIDITY_PERIOD_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + ((PUBLIC_KEY_INFO_SEQUENCE_LENGTH <= 127) ? 2 : 3) + PUBLIC_KEY_INFO_SEQUENCE_LENGTH + EXTENSIONS_LENGTH
#define CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_ROOT   10 + VERSION_OCTET_IDENTIFIER_LENGTH + CERT_SERIAL_NUMBER_LENGTH + SIGNATURE_ALGORITHM_IDENTIFIER_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + VALIDITY_PERIOD_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + ((PUBLIC_KEY_INFO_SEQUENCE_LENGTH <= 127) ? 2 : 3) + PUBLIC_KEY_INFO_SEQUENCE_LENGTH + EXTENSIONS_ROOT_LENGTH
#define CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_LEAF   10 + VERSION_OCTET_IDENTIFIER_LENGTH + CERT_SERIAL_NUMBER_LENGTH + SIGNATURE_ALGORITHM_IDENTIFIER_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + VALIDITY_PERIOD_SEQUENCE_LENGTH + ((ISSUER_NAME_SEQUENCE_LENGTH <= 127) ? 2 : 3) + ISSUER_NAME_SEQUENCE_LENGTH + ((PUBLIC_KEY_INFO_SEQUENCE_LENGTH <= 127) ? 2 : 3) + PUBLIC_KEY_INFO_SEQUENCE_LENGTH + EXTENSIONS_LEAF_LENGTH


/* Following identifies the signature algorithm
 */
#define SIGNATURE_ALGORITHM_PARAMETERS_LENGTH   0
#define CERT_SIGNATURE_ALGORITHM_SEQUENCE_LENGTH   4 + ASN1_OID_ECDSAWITHSHA384_LENGTH + SIGNATURE_ALGORITHM_PARAMETERS_LENGTH


/* Following identifies the signature encrypted hash
 */
#define CERT_SIGNATURE_HASH_VALUE_LENGTH   CERT_SIGNATURE_STRUCTURE_LENGTH


/* Calculate length of the entire x509 certificate
 */
#define CERT_SIGNED_CONTENT_HEADER_LENGTH   ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH <= 127) ? 2 : ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH > 255) ? 4 : 3) )
#define CERT_SIGNED_CONTENT_LENGTH   CERT_SIGNED_CONTENT_HEADER_LENGTH + CERT_SIGNED_CONTENT_SEQUENCE_LENGTH

#define CERT_SIGNED_CONTENT_HEADER_LENGTH_ROOT   ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_ROOT <= 127) ? 2 : ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_ROOT > 255) ? 4 : 3) )
#define CERT_SIGNED_CONTENT_LENGTH_ROOT   CERT_SIGNED_CONTENT_HEADER_LENGTH_ROOT + CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_ROOT

#define CERT_SIGNED_CONTENT_HEADER_LENGTH_LEAF   ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_LEAF <= 127) ? 2 : ((CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_LEAF > 255) ? 4 : 3) )
#define CERT_SIGNED_CONTENT_LENGTH_LEAF   CERT_SIGNED_CONTENT_HEADER_LENGTH_LEAF + CERT_SIGNED_CONTENT_SEQUENCE_LENGTH_LEAF

#define CERT_SIGNATURE_ALGORITHM_HEADER_LENGTH   ((CERT_SIGNATURE_ALGORITHM_SEQUENCE_LENGTH <= 127) ? 2 : ((CERT_SIGNATURE_ALGORITHM_SEQUENCE_LENGTH > 255) ? 4 : 3) )
#define CERT_SIGNATURE_ALGORITHM_LENGTH   CERT_SIGNATURE_ALGORITHM_HEADER_LENGTH + CERT_SIGNATURE_ALGORITHM_SEQUENCE_LENGTH
#define CERT_SIGNATURE_HASH_HEADER_LENGTH   ((CERT_SIGNATURE_HASH_VALUE_LENGTH <= 127) ? 2 : ((CERT_SIGNATURE_HASH_VALUE_LENGTH > 255) ? 4 : 3) )
#define CERT_SIGNATURE_HASH_LENGTH   CERT_SIGNATURE_HASH_HEADER_LENGTH + CERT_SIGNATURE_HASH_VALUE_LENGTH

#define CERT_ALL_CONTENTS_SEQUENCE_LENGTH   CERT_SIGNED_CONTENT_LENGTH + CERT_SIGNATURE_ALGORITHM_LENGTH + CERT_SIGNATURE_HASH_LENGTH
#define CERT_ALL_CONTENTS_SEQUENCE_LENGTH_ROOT   CERT_SIGNED_CONTENT_LENGTH_ROOT + CERT_SIGNATURE_ALGORITHM_LENGTH + CERT_SIGNATURE_HASH_LENGTH
#define CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF   CERT_SIGNED_CONTENT_LENGTH_LEAF + CERT_SIGNATURE_ALGORITHM_LENGTH + CERT_SIGNATURE_HASH_LENGTH

#define FULL_CERT_LENGTH_ROOT   ( ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_ROOT <= 127) ? 2 : ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_ROOT > 255) ? 4 : 3) ) + CERT_ALL_CONTENTS_SEQUENCE_LENGTH_ROOT )
#define FULL_CERT_LENGTH_LEAF   ( ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF <= 127) ? 2 : ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF > 255) ? 4 : 3) ) + CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF )
#define FULL_CERT_LENGTH   ( ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF <= 127) ? 2 : ((CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF > 255) ? 4 : 3) ) + CERT_ALL_CONTENTS_SEQUENCE_LENGTH_LEAF )

#endif

#endif /* EAGLESTREAM_INC_CERT_GEN_OPTIONS_H_ */
