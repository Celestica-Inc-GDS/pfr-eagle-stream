#ifndef INC_TESTDATA_FILES_ATTESTATION_SECP256_H
#define INC_TESTDATA_FILES_ATTESTATION_SECP256_H

#ifdef GTEST_ATTEST_256

#define FULL_PFR_IMAGE_BMC_AFM_FILE "testdata/full_pfr_image_bmc_attestation.bin"
#define FULL_PFR_IMAGE_BMC_AFM_FILE_SIZE 134217728

/*
 * Signed AFM
 */
//#define SIGNED_AFM_FILE "testdata/signed_afm.bin"
//#define SIGNED_AFM_FILE_SIZE 4096
#define SIGNED_AFM_FILE "testdata/signed_afm.bin"
#define SIGNED_AFM_FILE_SIZE 4096

//#define SIGNED_FULL_AFM_FILE "testdata/attestation_fixed_pubkey_xy/signed_full_afm_fixed_pubkey_xy.bin"
//#define SIGNED_FULL_AFM_FILE_SIZE 131072
#define SIGNED_FULL_AFM_FILE "testdata/attestation_fixed_pubkeyxy_and_hash_measurement_1/signed_full_afm_fixed_pubkey_xy.bin"
#define SIGNED_FULL_AFM_FILE_SIZE 131072

//#define UFM_PFR_DATA_ATTEST_EXAMPLE_KEY_FILE "testdata/ufm_rk_hash_secp256_with_attestation.hex"
//#define UFM_PFR_DATA_ATTEST_EXAMPLE_KEY_FILE_SIZE 320
#define UFM_PFR_DATA_ATTEST_EXAMPLE_KEY_FILE "testdata/ufm_rk_hash_256_egs_attestation.hex"
#define UFM_PFR_DATA_ATTEST_EXAMPLE_KEY_FILE_SIZE 340

#define UT_MCTP_SOM_EOM_BYTE_IDX   5
#define UT_MCTP_SOURCE_ADDR        1
#define UT_MCTP_BYTE_COUNT_IDX     0

#define UT_MCTP_SPDM_VERSION_IDX   7

// Negotiate algorithm
#define UT_MCTP_SPDM_NEGO_ALGO_LENGTH_IDX    12
#define UT_MCTP_SPDM_NEGO_ALGO_MEAS_SPEC_IDX    13
#define UT_MCTP_SPDM_NEGO_ALGO_BASE_ASYM_ALGO_IDX    18
#define UT_MCTP_SPDM_NEGO_ALGO_BASE_HASH_ALGO_IDX    22
#define UT_MCTP_SPDM_NEGO_ALGO_EXT_ASYM_COUNT_IDX    35
#define UT_MCTP_SPDM_NEGO_ALGO_EXT_HASH_COUNT_IDX    36

// Successful algorithm
#define UT_MCTP_SPDM_SUCC_ALGO_MEAS_HASH_ALGO_IDX    18
#define UT_MCTP_SPDM_SUCC_ALGO_BASE_ASYM_SEL_IDX     22
#define UT_MCTP_SPDM_SUCC_ALGO_BASE_HASH_SEL_IDX     26
#define UT_MCTP_SPDM_SUCC_ALGO_EXT_ASYM_SEL_COUNT_IDX    39
#define UT_MCTP_SPDM_SUCC_ALGO_EXT_HASH_SEL_COUNT_IDX    40

/**
 *
 * Example of incoming MCTP packets in which CPLD is the responder.
 * The payload does not consist of actual SPDM messages as these example messages
 * are used for specific tests.
 *
 * These messages contains the MCTP packet header which is processed by FW to track
 * the packets
 *
 * Good Packet Categories:
 *     1) First packet (SOM '1')
 *     2) Middle packet (SOM '0' and EOM '0')
 *     3) Last packet (EOM '1')
 *     4) First/last packet (SOM '1' and EOM '1')
 *
 * Bad Packet categories:
 *     1) Byte count > actual payload size
 *     2) Payload size > byte count
 *
 */
#define BMC_MCTP_CHALLENGE_PACKET_WITH_SOM_HIGH_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0xaa, 0xbb, 0xcc, 0xdd, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11\
}

#define BMC_MCTP_CHALLENGE_MIDDLE_PACKET_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11\
}

#define BMC_MCTP_CHALLENGE_PACKET_WITH_EOM_HIGH_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0xaa, 0x00, 0xcc, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11\
}

#define BMC_MCTP_CHALLENGE_PACKET_WITH_SOM_AND_EOM_HIGH_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_MCTP_INTERMEDIARY_CHALLENGE_PACKET_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_MCTP_CHALLENGE_PACKET_EXCESS_BYTE_COUNT_REPLICA {\
        0x20, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_MCTP_CHALLENGE_PACKET_EXCESS_PACKET_SIZE_REPLICA {\
        0x1f, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define PCIE_MCTP_CHALLENGE_PACKET_WITH_SOM_HIGH_REPLICA {\
        0x1f, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

/**
 *
 * Example of SPDM payload messages.
 * Some of these messages are encapsulated by MCTP packet header and others none.
 *
 * Categories (current):
 *     1)  GET_VERSIONS
 *     2)  SUCCESSFUL_VERSIONS
 *     3)  GET_CAPABILITIES
 *     4)  SUCCESSFUL_CAPABILITIES
 *     5)  NEGOTIATE_ALGORITHMS
 *     6)  SUCCESSFUL_ALGORITHMS
 *
 */
#define BMC_SPDM_GET_CAPABILITY_SOM_EOM_HIGH {\
        0x1f, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x10, 0xe1, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_SPDM_GET_CAPABILITY_SOM_HIGH {\
        0x1f, 0x02, 0x00, 0x00, 0x00, 0x80, 0x05, 0x10, 0xe1, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_SPDM_GET_CAPABILITY_EOM_HIGH {\
        0x1f, 0x02, 0x00, 0x00, 0x00, 0x40, 0x05, 0x10, 0xe1, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define BMC_SPDM_GET_DIGEST_SOM_EOM_HIGH {\
        0x1f, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x10, 0x81, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

//get_version example message
#define SPDM_GET_VERSION_MSG {\
        0x10, 0x84, 0x00, 0x00\
}

// successful_version exp message
#define SPDM_SUCCESSFUL_VERSION_MSG_THREE_VER_ENTRY {\
        0x10, 0x04, 0x00, 0x00, 0x00, 0x03, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63\
}

// get_capabilities example message
#define SPDM_GET_CAPABILITY_MSG {\
        0x10, 0xe1, 0x00, 0x00\
}

// successful_capabilities example message
#define SPDM_SUCCESSFUL_CAPABILITY_MSG {\
        0x10, 0x61, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16\
}

#define SPDM_SUCCESSFUL_CAPABILITY_WITHOUT_FLAGS {\
        0x10, 0x61, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define SPDM_SUCCESSFUL_CAPABILITY_MSG_DIGEST_ONLY {\
        0x10, 0x61, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02\
}

#define MCTP_SPDM_SUCCESSFUL_CAPABILITY_MSG_DIGEST_ONLY {\
        0x02, 0x0f, 0x12, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x10, 0x61, 0x00,\
		0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02\
}
// Response message from cpld
#define BMC_SPDM_SUCCESSFUL_CAPABILITY_SOM_EOM_HIGH {\
        0x02, 0x0f, 0x12, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x10, 0x61, 0x00,\
		0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16\
}

// negotiate algorithms example message
#define SPDM_NEGOTIATE_ALGORITHM_SHA_ECDSA_256 {\
        0x10, 0xe3, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,\
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define SPDM_NEGOTIATE_ALGORITHM_SHA_ECDSA_384 {\
        0x10, 0xe3, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,\
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define SPDM_NEGOTIATE_ALGORITHM_SHA_ECDSA_256_AND_384 {\
        0x10, 0xe3, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,\
        0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

// incoming negotiate_algorithm message to CPLD
#define SPDM_NEGOTIATE_ALGORITHM_SHA_ECDSA_256_AND_384_CPLD_AS_RESPONDER {\
        0x10, 0xe3, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,\
        0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

// successful algorithms example message
#define SPDM_SUCCESSFUL_ALGORITHM_SHA_ECDSA_256 {\
        0x10, 0x63, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,\
        0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00\
}

#define SPDM_SUCCESSFUL_ALGORITHM_SHA_ECDSA_384 {\
        0x10, 0x63, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,\
        0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00\
}

#define SPDM_SUCCESSFUL_ALGORITHM_SHA_ECDSA_256_AND_384 {\
        0x10, 0x63, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,\
        0x00, 0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00\
}

#define SPDM_SUCCESSFUL_ALGORITHM_SHA_ECDSA_384_WITHOUT_CHAL_AND_MEAS_CAP {\
        0x10, 0x63, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,\
        0x00, 0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

/**
 *
 * These messages are used for full flow testing.
 * It has SPDM message with MCTP header (NOTE: beginning from byte count)
 *
 * All these messages will have SOM and EOM set to '0' and should be modified by unit tests appropriately
 */

#define MCTP_SPDM_GET_VERSION_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00\
}

#define UT_MCTP_SPDM_VERSION_ENTRY_COUNT_IDX 12

#define MCTP_SPDM_SUCCESSFUL_VERSION_MSG_THREE_VER_ENTRY {\
        0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x04, 0x00, 0x00,\
        0x00, 0x03, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63\
}

// get_capabilities example message
#define MCTP_SPDM_GET_CAPABILITY_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0xe1, 0x00, 0x00\
}

#define UT_MCTP_SPDM_CAPABILITY_CT_EXPONENT_IDX 12
#define UT_MCTP_SPDM_CAPABILITY_FLAGS_IDX 15

// successful_capabilities example message
#define MCTP_SPDM_SUCCESSFUL_CAPABILITY_MSG {\
        0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x61, 0x00, 0x00,\
        0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define UT_MCTP_SPDM_NEGOTIATE_ALGORITHM_BASE_ASYM_ALGO 15
#define UT_MCTP_SPDM_NEGOTIATE_ALGORITHM_BASE_HASH_ALGO 19

#define MCTP_SPDM_NEGOTIATE_ALGORITHM {\
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0xe3, 0x00, 0x00,\
        0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00\
}

#define UT_MCTP_SPDM_ALGORITHM_LENGTH 11
#define UT_MCTP_SPDM_ALGORITHM_MEASUREMENT_SPEC 13
#define UT_MCTP_SPDM_ALGORITHM_MEASUREMENT_HASH_ALGO 15
#define UT_MCTP_SPDM_ALGORITHM_BASE_ASYM_SEL 19
#define UT_MCTP_SPDM_ALGORITHM_BASE_HASH_SEL 23
#define UT_MCTP_SPDM_ALGORITHM_EXT_ASYM_SEL_COUNT 39
#define UT_MCTP_SPDM_ALGORITHM_EXT_HASH_SEL_COUNT 40

#define MCTP_SPDM_SUCCESSFUL_ALGORITHM {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x63, 0x00, 0x00,\
        0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x00,\
        0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00\
}

#define MCTP_SPDM_GET_DIGEST_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x81, 0x00, 0x00\
}

#define UT_MCTP_SPDM_DIGEST_SLOT_MASK 10

#define MCTP_SPDM_DIGEST_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x01, 0x00, 0x00,\
        0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x00,\
        0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\
}

#define UT_MCTP_SPDM_GET_CERTIFICATE_OFFSET_MASK 12
#define UT_MCTP_SPDM_GET_CERTIFICATE_LENGTH_MASK 14

#define MCTP_SPDM_GET_CERTIFICATE_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x82, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00\
}

#define UT_MCTP_SPDM_CERTIFICATE_PORTION_LENGTH_MASK 12
#define UT_MCTP_SPDM_CERTIFICATE_REMAINDER_LENGTH_MASK 14

#define MCTP_SPDM_CERTIFICATE_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x02, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00\
}

#define UT_CHALLENGE_SPDM_SLOT_NUMBER_IDX 9
#define UT_CHALLENGE_SPDM_MEAS_SUMMARY_HASH_TYPE_IDX 10
#define UT_CHALLENGE_SPDM_NONCE_IDX 11

#define MCTP_SPDM_CHALLENGE_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x83, 0x00, 0x00,\
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
	    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
	    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11\
}

#define UT_OPAQUE_LENGTH 2
#define UT_CHALLENGE_AUTH_SPDM_SLOT_NUMBER_IDX 9
#define UT_CHALLENGE_AUTH_SPDM_SLOT_MASK_IDX 10
#define UT_CHALLENGE_AUTH_SPDM_CERT_CHAIN_HASH_IDX 11
#define UT_CHALLENGE_AUTH_SPDM_NONCE_IDX 59
#define UT_CHALLENGE_AUTH_SPDM_CERT_MEAS_SUMMARY_HASH_IDX 91
#define UT_CHALLENGE_AUTH_SPDM_OPAQUE_LENGTH_IDX 139
#define UT_CHALLENGE_AUTH_SPDM_OPAQUE_DATA_IDX 141
#define UT_CHALLENGE_AUTH_SPDM_SIGNATURE_IDX UT_CHALLENGE_AUTH_SPDM_OPAQUE_DATA_IDX + UT_OPAQUE_LENGTH

#define MCTP_SPDM_CHALLENGE_AUTH_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x03, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
		0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
	    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x84, 0x00, 0x00,\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10\
}

#define UT_GET_MEASUREMENT_REQUEST_ATTRIBUTE 9
#define UT_GET_MEASUREMENT_OPERATION_MEASUREMENT_NUMBER 10

#define MCTP_SPDM_GET_MEASUREMENT_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0xE0, 0x00, 0x00,\
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11\
}

#define UT_RECORD_LENGTH 71

#define UT_MEASUREMENT_TOTAL_NUMBER_OF_MEASUREMENT 9
#define UT_MEASUREMENT_TOTAL_NUMBER_OF_BLOCKS 11
#define UT_MEASUREMENT_RECORD_LENGTH 12
#define UT_MEASUREMENT_RECORD 15
#define UT_MEASUREMENT_NONCE UT_MEASUREMENT_RECORD + UT_RECORD_LENGTH
#define UT_MEASUREMENT_OPAQUE_LENGTH UT_MEASUREMENT_NONCE + 32
#define UT_MEASUREMENT_OPAQUE_DATA UT_MEASUREMENT_OPAQUE_LENGTH + 2
#define UT_MEASUREMENT_SIGNATURE UT_MEASUREMENT_OPAQUE_DATA + UT_OPAQUE_LENGTH

#define MCTP_SPDM_MEASUREMENT_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x60, 0x00, 0x00,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,\
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11\
}

// SPDM error message
#define UT_MCTP_SPDM_ERROR_RESPONSE_ERROR_CODE 9
#define UT_MCTP_SPDM_ERROR_RESPONSE_ERROR_DATA 10

#define MCTP_SPDM_ERROR_RESPONSE_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x7F, 0x00, 0x00\
}

#define UT_MCTP_SPDM_ERROR_RESPONSE_EXTENDED_ERROR_RDT_EXPONENT 11
#define UT_MCTP_SPDM_ERROR_RESPONSE_EXTENDED_ERROR_REQUEST_CODE 12
#define UT_MCTP_SPDM_ERROR_RESPONSE_EXTENDED_ERROR_TOKEN 13
#define UT_MCTP_SPDM_ERROR_RESPONSE_EXTENDED_ERROR_RDTM 14

#define MCTP_SPDM_ERROR_RESPONSE_EXTENDED_ERROR_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x7F, 0x00, 0x00,\
        0x00, 0x00, 0x00, 0x00\
}

#define UT_MCTP_SPDM_RESPOND_IF_READY_REQUEST_CODE 9
#define UT_MCTP_SPDM_RESPOND_IF_READY_TOKEN 10

#define MCTP_SPDM_RESPOND_IF_READY_MSG {\
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0xFF, 0x00, 0x00\
}

#endif




#endif /* INC_TESTDATA_FILES_ATTESTATION_SECP256_H */
